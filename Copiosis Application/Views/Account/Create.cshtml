@* Page for creating transactions for both producers and consumers, do they need to be separate pages? *@
@model Copiosis_Application.Models.NewTransactionModel

<div class="row">
    <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-xs-8 col-xs-offset-2">
        @if (Model.IsProducer == true)
        {
            <h2 id="add-item-title" class="text-center">Producer: Add a Transaction</h2>
            <script>$('#producerTransNav').addClass('active');</script>
        }
        else
        {
            <h2 id="add-item-title" class="text-center">Consumer: Add a Transaction</h2>
            <script>$('#consumerTransNav').addClass('active');</script>
        }
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            bool consumerHasEnough = true;
            bool producerHasEnough = true;
            if (!ViewData.ModelState.IsValid)
            {
                <div class="validation-summary-errors panel panel-danger"
                        data-valmsg-summary="true">
                    <div class="panel-heading">
                        <center><strong>Cannot add this transaction. Please try again later</strong></center>
                        @if (ViewData.ModelState["Consumer"] != null && ViewData.ModelState["Consumer"].Errors.Count() >= 1)
                        {
                            consumerHasEnough = false;
                        }
                        else if (ViewData.ModelState["Producer"] != null && ViewData.ModelState["Producer"].Errors.Count() >= 1)
                        {
                            producerHasEnough = false;
                        }
                    </div>
                </div><br />
            }
            @*If user is using producer form*@
            if (Model.IsProducer == true)
            {
                <div class="row">
                    <div class="form-group @(consumerHasEnough ? null : "error")">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.Consumer, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.DropDownListFor(m => m.Consumer, new SelectList(Model.Consumers), "Select ...",  new { @id = "consumer-dropdown", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Consumer)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.ProductProvided, "Product I Provided:", new { @class = "control-label transaction-label", @id="product-provided-producer"})
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.DropDownListFor(m => m.ProductProvided, new SelectList(Model.Products), new { @id = "product-dropdown", @class = "form-control", @placeholder = "Select the Product you provided" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.Notes, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", @placeholder = "Notes", @rows = "4", @cols = "40", @id = "notesInput" })
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-12 col-md-12 col-xs-12" style="text-align:center;">
                            <button class="btn btn-primary"   type="submit" value="Submit">Submit</button>
                            <button class="btn btn-default"  onclick="confirmBack()">Cancel</button>
                        </div>
                    </div>
                </div>
            }
            @*If user is not using producer form*@
            else
            {
                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.Producer, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.DropDownListFor(m => m.Producer, new SelectList(Model.Producers), "Select ...", new { @id = "producer-dropdown", @class = "form-control"})
                            @Html.ValidationMessageFor(m => m.Producer)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group @(producerHasEnough ? null : "error")">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.ProductProvided, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.DropDownListFor(m => m.ProductProvided, new SelectList(Model.Products), new { @id = "product-dropdown", @class = "form-control", @placeholder = "Select the Product you provided" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-3 col-md-3 col-xs-12">
                            @Html.LabelFor(m => m.Notes, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12">
                            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", @placeholder = "Notes", @rows = "4", @cols = "40", @id = "notesInput" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-3 col-md-3 col-xs-12" style="margin-top:13px">
                            @Html.LabelFor(m => m.SatisfactionRating, new { @class = "control-label transaction-label" })
                        </div>
                        <div class="col-lg-9 col-md-9 col-xs-12" id="satisfaction-rating-radios">
                            @Html.RadioButtonFor(m => m.SatisfactionRating, -2, new { @name = "SR", @id="very-unsatisfied"})
                            <label for="very-unsatisfied" style="margin-left:40px"><img src="~/Content/cry.ico" alt="Very Unsatisfied" height="32" width="32" data-toggle="tooltip" data-original-title="Very Unsatisfied" /></label>
                            @Html.RadioButtonFor(m => m.SatisfactionRating, -1, new { @name ="SR", @id ="unsatisfied" })
                            <label for="unsatisfied"><img src="~/Content/sad.ico" alt="Unsatisifed" height="32" width="32" data-toggle="tooltip" data-original-title="Unsatisfied"/></label>
                            @Html.RadioButtonFor(m => m.SatisfactionRating, 0, new { @name = "SR", @id = "neutral" })
                            <label for="neutral"><img src="~/Content/smiley_neutral.ico" alt="Neutral" height="32" width="32" data-toggle="tooltip" data-original-title="Neutral"/></label>
                            @Html.RadioButtonFor(m => m.SatisfactionRating, 1, new { @name = "SR", @id = "satisfied" })
                            <label for="satisfied"><img src="~/Content/smile_1.ico" alt="Satisfied" height="32" width="32" data-toggle="tooltip" data-original-title="Satisfied"/></label>
                            @Html.RadioButtonFor(m => m.SatisfactionRating, 2, new { @name = "SR", @id = "very-satisfied" })
                            <label for="very-satisfied"><img src="~/Content/happy.ico" alt="Very Satisfied" height="32" width="32" data-toggle="tooltip" data-original-title="Very Satisfied" /></label>    
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="form-group">
                        <div class="col-lg-12 col-md-12 col-xs-12" style="text-align:center;">
                            <button class="btn btn-primary" type="submit" value="Submit">Submit</button>
                            <button class="btn btn-default" onclick="confirmBack()">Cancel</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    @*This handles the update to producer items*@
    <script type="text/javascript">
        $("#producer-dropdown").change(function (e) {
            var currentChoice = $(this).val();
            console.log(currentChoice);
            if (currentChoice) {
                //Transfer the list of items to an array before finding where to put them in the DOM, that way I can just drop it all in together.
                var temp = [];
                $.ajax({
                    url: "/Account/FetchProducerItems/",
                    type: "get",
                    data: { name: currentChoice },
                    success: function (result) {
                        if (result) {
                            //For each result we get, store a string in our temp array of what we need the html to look like.
                            $.each(result.products, function (idx, str) {
                                temp.push('<option value="' + str + '">' + str + '</option>');
                            });
                            //Empty the current list of items
                            $('#product-dropdown').find('option').remove();
                            //Drop in our array of strings
                            $('#product-dropdown').empty().append(temp.join(''));
                        }
                        else {
                            $('#product-dropdown').find('option').remove();

                            $('#product-dropdown').empty().append("Select a user to see their products.");
                        }
                    },
                    error: function (result) {
                        console.log("Error receiving list of products owned by: " + currentChoice);
                    }
                });
            } else {
                $('#product-dropdown').find('option').remove();
            }
        }).trigger('change');
    </script>

    @*This is to handle the satisfaction rating*@
    <script type="text/javascript">
        $(function () {
            $('img').tooltip({ placement: 'bottom' });
        });
        $('#satisfaction-rating-radios input:radio').addClass('input_hidden');
        $('#satisfaction-rating-radios label').click(function () {
            $(this).addClass('selected').siblings().removeClass('selected');
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}
